<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.mapper.system.ScTimeTaskMapper">
	<resultMap id="BaseResultMap"
		type="org.entity.system.ScTimeTask">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="code" property="code" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="time" property="time" jdbcType="VARCHAR" />
		<result column="exec_class" property="execClass"
			jdbcType="VARCHAR" />
		<result column="type" property="type" jdbcType="VARCHAR" />
		<result column="type_name" property="typeName" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="VARCHAR" />
		<result column="status_name" property="statusName" jdbcType="VARCHAR" />
		<result column="description" property="description"
			jdbcType="VARCHAR" />
		<result column="create_user" property="createUser"
			jdbcType="VARCHAR" />
		<result column="create_time" property="createTime"
			jdbcType="VARCHAR" />
		<result column="update_user" property="updateUser"
			jdbcType="VARCHAR" />
		<result column="update_time" property="updateTime"
			jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		id, code, name, time, exec_class, type, status,
		description, create_user,
		DATE_FORMAT(create_time,'%Y-%m-%d %H:%i:%s')
		as
		create_time,
		update_user,
		DATE_FORMAT(update_time,'%Y-%m-%d %H:%i:%s')
		as
		update_time
	</sql>
	<select id="select" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from sc_time_task
		where `code` = #{code,jdbcType=VARCHAR}
	</select>
	<delete id="delete" parameterType="java.lang.String">
		delete from sc_time_task
		where
		`code` = #{code,jdbcType=VARCHAR}
	</delete>
	<insert id="insert"
		parameterType="org.entity.system.ScTimeTask">
		insert into sc_time_task
		<trim prefix="(" suffix=")" suffixOverrides=",">
			uid,
			code,
			name,
			time,
			exec_class,
			type,
			status,
			description,
			create_user,
			create_time,
			update_user,
			update_time,
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			#{uid,jdbcType=VARCHAR},
			#{code,jdbcType=VARCHAR},
			#{name,jdbcType=VARCHAR},
			#{time,jdbcType=VARCHAR},
			#{execClass,jdbcType=VARCHAR},
			#{type,jdbcType=VARCHAR},
			#{status,jdbcType=VARCHAR},
			#{description,jdbcType=VARCHAR},
			#{createUser,jdbcType=VARCHAR},
			STR_TO_DATE(#{createTime,jdbcType=VARCHAR},'%Y-%m-%d %H:%i:%s'),
			#{updateUser,jdbcType=VARCHAR},
			STR_TO_DATE(#{updateTime,jdbcType=VARCHAR},'%Y-%m-%d %H:%i:%s'),
		</trim>
	</insert>
	<update id="update" parameterType="org.entity.system.ScTimeTask">
		update sc_time_task
		<set>
			<if test="name != null and name != '' ">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="time != null and time != '' ">
				time = #{time,jdbcType=VARCHAR},
			</if>
			<if test="execClass != null and execClass != '' ">
				exec_class = #{execClass,jdbcType=VARCHAR},
			</if>
			<if test="type != null and type != '' ">
				type = #{type,jdbcType=VARCHAR},
			</if>
			<if test="status != null and status != '' ">
				status = #{status,jdbcType=VARCHAR},
			</if>
			<if test="description != null and description != '' ">
				description = #{description,jdbcType=VARCHAR},
			</if>
			update_user = #{updateUser,jdbcType=VARCHAR},
			update_time =
			STR_TO_DATE(#{updateTime,jdbcType=VARCHAR},'%Y-%m-%d %H:%i:%s'),
		</set>
		where `code` = #{code,jdbcType=VARCHAR}
	</update>
	<select id="page" resultMap="BaseResultMap"
		parameterType="org.dto.system.ScTimeTaskDto">
		select
		stt.`code`,
		stt.`name`,
		stt.time,
		stt.exec_class,
		t.`name` as type_name,
		s.`name` as status_name,
		stt.create_time,
		stt.update_time
		from sc_time_task as stt LEFT JOIN sc_setting as t ON stt.type = t.`code`
		LEFT JOIN sc_setting as s ON stt.`status` = s.`code`
		<where>
			stt.uid is not null
			<if test="name != null and name != '' ">
				AND stt.`name` like
				CONCAT('%',#{name,jdbcType=VARCHAR},'%')
			</if>
			<if test="type != null and type != '' ">
				AND stt.type = #{type,jdbcType=VARCHAR}
			</if>
			<if test="status != null and status != '' ">
				AND stt.`status` = #{status,jdbcType=VARCHAR}
			</if>
			<if test="execClass != null and execClass != '' ">
				AND stt.exec_class like
				CONCAT('%',#{execClass,jdbcType=VARCHAR},'%')
			</if>
		</where>
	</select>
</mapper>